'', gsub(later_path, '', file)))
### Go2 should've been named Downsample_1.0
names(de_dats)[which(names(de_dats) == 'Go2')] <- 'Downsample_1.0'
### Remove "Downsample_"
names(de_dats) <- sapply(names(de_dats), function(x) gsub('Downsample_', '', x))
topN <- 50
### Subset to cell type
tops <- lapply(de_dats, function(dat) get_topN_genes_fm(dat, topN))
names(tops) <- names(de_dats)
pdat <- as.data.frame(sapply(tops, function(top) length(top[which(top %in% tops[['1.0']])])))
pdat$DS <- row.names(pdat)
colnames(pdat) <- c('TopN_proteins', 'Downsample')
p <- ggplot(data=pdat, aes(x=Downsample, y=TopN_proteins)) +
geom_bar(stat="identity") + ggtitle(paste0(assay, '- ', celltype))
print(p)
}
}
dev.off()
library('sys')
library('Seurat')
library('stringr')
library('pheatmap')
library('ggplot2')
library('umap')
library('textshape')
library('dplyr')
library('biomaRt')
library('grid')
library('scales')
library('rsconnect')
library('data.table')
library('lisi')
source('/hpcdata/vrc/vrc1_data/douek_lab/wakecg/sc_functions.R')
source('/hpcdata/vrc/vrc1_data/douek_lab/wakecg/CITESeq/CITESeq_functions.R')
?FindMarkers
library('sys')
library('Seurat')
library('stringr')
library('pheatmap')
library('ggplot2')
library('umap')
library('textshape')
library('dplyr')
library('biomaRt')
library('grid')
library('scales')
library('rsconnect')
library('data.table')
library('lisi')
source('/hpcdata/vrc/vrc1_data/douek_lab/wakecg/sc_functions.R')
source('/hpcdata/vrc/vrc1_data/douek_lab/wakecg/CITESeq/CITESeq_functions.R')
# args = commandArgs(trailingOnly=TRUE)
# out_pdf <- args[1]
# rds_files <- args[2:length(args)]
res_sub <- 'DS_by_batch'
#res_sub <- ''
cor_pdf <- paste0('/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/', res_sub, '/DSB_correlations.pdf')
cor_dir <- paste0('/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/', res_sub, '/DSB_correlations/')
out_pdf <- paste0('/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/', res_sub, '/Comparison.pdf')
rds_files <- paste0('/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/', res_sub, '/Downsample_',
c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9), '/Mapped.RDS')
rds_files <- c(rds_files, '/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/Go2/Mapped.RDS')
rds_files <- rds_files[file.exists(rds_files)]
#rds_files <- rds_files[1:2]
names(rds_files) <- sapply(rds_files, function(file) gsub(paste0('/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/', res_sub, '/'), '', gsub('/Mapped.RDS', '', file)))
names(rds_files) <- sapply(names(rds_files), function(file) gsub('/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/', '', gsub('/Mapped.RDS', '', file)))
### Go2 should've been named Downsample_1.0
names(rds_files)[which(names(rds_files) == 'Go2')] <- 'Downsample_1.0'
### Remove "Downsample_"
names(rds_files) <- sapply(names(rds_files), function(x) gsub('Downsample_', '', x))
names_key_file <- '/hpcdata/vrc/vrc1_data/douek_lab/wakecg/Biolegend_panel.csv'
names_key_dat <- read.table(names_key_file, sep = ',', quote = "", header = T)
#names_key_dat$Name_brev <- gsub('', names_key_dat$Name
names_key <- names_key_dat$Name
names(names_key) <- names_key_dat$ID
get_topN_genes <- function(sdat, topN, datatype = 'RNA', celltype = NA){
if(!is.na(celltype)){
subdat <- subset(sdat, cells = names(which(sdat$predicted.celltype.l1 == celltype)))
} else{
subdat <- sdat
}
sums <- rowSums(subdat@assays[[datatype]])
sums <- sums[order(sums, decreasing = T)]
tops <- names(sums[1:topN])
return(tops)
}
read_diet_seurat <- function(rds_file, umaps, assays = c('RNA', 'prot')){
sdat <- readRDS(rds_file)
DefaultAssay(sdat) <- assays[1]
sdat <- DietSeurat(sdat, counts = F, dimreducs = umaps, assays = assays)
return(sdat)
}
evaluating_downsample_fraction <- function(ncounts, ds){
### Get the cells from this downsample, but for the last downsample set (or just '1.0')
orig <- ncounts[['1.0']]
### Remove cells in DSX but not in DS1.0?
n <- length(which(!(names(ncounts[[ds]]) %in% names(orig))))
if(n > 0){
print(paste0(n, ' cells in the downsampled set but not in the original....'))
}
ncounts[[ds]] <- ncounts[[ds]][which(names(ncounts[[ds]]) %in% names(orig))]
orig <- orig[names(ncounts[[ds]])]
### fractions
frac <- as.data.frame(ncounts[[ds]] / orig)
frac$DS <- ds
colnames(frac) <- c('actual_fraction', 'downsample_category')
nna <- sum(is.na(frac$actual_fraction))
if(nna > 0){
print(paste0(nna, ' NAs for some reason'))
}
return(frac)
}
ilisi_dat <- function(dat, sdat_name){
dat$downsample <- sdat_name
colnames(dat) <- c('ilisi', 'downsample')
return(dat)
}
umaps <- c("RNA_umap", "prot_umap", "dsb_wnn_umap")
sumdat <- as.data.fram(matrix(nrow = length(row.names(sdats[['1.0']]@assays$prot))), ncol = 5)
sumdat <- as.data.frame(matrix(nrow = length(row.names(sdats[['1.0']]@assays$prot))), ncol = 5)
sumdat <- as.data.frame(matrix(nrow = 10, ncol = 5)
)
View(sumdat)
library('sys')
library('Seurat')
library('stringr')
library('pheatmap')
library('ggplot2')
library('umap')
library('textshape')
library('dplyr')
library('biomaRt')
library('grid')
library('scales')
library('rsconnect')
library('data.table')
library('lisi')
source('/hpcdata/vrc/vrc1_data/douek_lab/wakecg/sc_functions.R')
source('/hpcdata/vrc/vrc1_data/douek_lab/wakecg/CITESeq/CITESeq_functions.R')
# args = commandArgs(trailingOnly=TRUE)
# out_pdf <- args[1]
# rds_files <- args[2:length(args)]
res_sub <- 'DS_by_batch'
#res_sub <- ''
cor_pdf <- paste0('/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/', res_sub, '/DSB_correlations.pdf')
cor_dir <- paste0('/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/', res_sub, '/DSB_correlations/')
out_pdf <- paste0('/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/', res_sub, '/Comparison.pdf')
rds_files <- paste0('/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/', res_sub, '/Downsample_',
c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9), '/Mapped.RDS')
rds_files <- c(rds_files, '/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/Go2/Mapped.RDS')
rds_files <- rds_files[file.exists(rds_files)]
#rds_files <- rds_files[1:2]
names(rds_files) <- sapply(rds_files, function(file) gsub(paste0('/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/', res_sub, '/'), '', gsub('/Mapped.RDS', '', file)))
names(rds_files) <- sapply(names(rds_files), function(file) gsub('/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/', '', gsub('/Mapped.RDS', '', file)))
### Go2 should've been named Downsample_1.0
names(rds_files)[which(names(rds_files) == 'Go2')] <- 'Downsample_1.0'
### Remove "Downsample_"
names(rds_files) <- sapply(names(rds_files), function(x) gsub('Downsample_', '', x))
names_key_file <- '/hpcdata/vrc/vrc1_data/douek_lab/wakecg/Biolegend_panel.csv'
names_key_dat <- read.table(names_key_file, sep = ',', quote = "", header = T)
#names_key_dat$Name_brev <- gsub('', names_key_dat$Name
names_key <- names_key_dat$Name
names(names_key) <- names_key_dat$ID
get_topN_genes <- function(sdat, topN, datatype = 'RNA', celltype = NA){
if(!is.na(celltype)){
subdat <- subset(sdat, cells = names(which(sdat$predicted.celltype.l1 == celltype)))
} else{
subdat <- sdat
}
sums <- rowSums(subdat@assays[[datatype]])
sums <- sums[order(sums, decreasing = T)]
tops <- names(sums[1:topN])
return(tops)
}
read_diet_seurat <- function(rds_file, umaps, assays = c('RNA', 'prot')){
sdat <- readRDS(rds_file)
DefaultAssay(sdat) <- assays[1]
sdat <- DietSeurat(sdat, counts = F, dimreducs = umaps, assays = assays)
return(sdat)
}
evaluating_downsample_fraction <- function(ncounts, ds){
### Get the cells from this downsample, but for the last downsample set (or just '1.0')
orig <- ncounts[['1.0']]
### Remove cells in DSX but not in DS1.0?
n <- length(which(!(names(ncounts[[ds]]) %in% names(orig))))
if(n > 0){
print(paste0(n, ' cells in the downsampled set but not in the original....'))
}
ncounts[[ds]] <- ncounts[[ds]][which(names(ncounts[[ds]]) %in% names(orig))]
orig <- orig[names(ncounts[[ds]])]
### fractions
frac <- as.data.frame(ncounts[[ds]] / orig)
frac$DS <- ds
colnames(frac) <- c('actual_fraction', 'downsample_category')
nna <- sum(is.na(frac$actual_fraction))
if(nna > 0){
print(paste0(nna, ' NAs for some reason'))
}
return(frac)
}
ilisi_dat <- function(dat, sdat_name){
dat$downsample <- sdat_name
colnames(dat) <- c('ilisi', 'downsample')
return(dat)
}
umaps <- c("RNA_umap", "prot_umap", "dsb_wnn_umap")
###
library('WriteXLS')
?WriteXLS
cor_xls <- paste0('/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/', res_sub, '/DSB_correlations.xls')
shiny::runApp('/hpcdata/vrc/vrc1_data/douek_lab/snakemakes/CITESeq/scripts')
library('sys')
library('Seurat')
library('stringr')
library('pheatmap')
library('ggplot2')
library('umap')
library('textshape')
library('dplyr')
library('biomaRt')
library('grid')
library('scales')
library('lisi')
source('/hpcdata/vrc/vrc1_data/snakemakes/sc_functions.R')
source('/hpcdata/vrc/vrc1_data/douek_lab/wakecg/CITESeq/CITESeq_functions.R')
cseq_file <- '/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/Go2/Mapped.RDS'
library('sys')
library('Seurat')
library('stringr')
library('pheatmap')
library('ggplot2')
library('umap')
library('textshape')
library('dplyr')
library('biomaRt')
library('grid')
library('scales')
library('lisi')
source('/hpcdata/vrc/vrc1_data/snakemakes/sc_functions.R')
source('/hpcdata/vrc/vrc1_data/douek_lab/wakecg/CITESeq/CITESeq_functions.R')
cseq <- readRDS(cseq_file)
assay <- 'RNA'
cluster_info <- 'predicted.celltype.l1-B'
out_csv <- '/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/Go2/SubClusters/'
cluster_info <- 'predicted.celltype.l1-B'
out_csv <- '/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/Go2/SubClusters/RNA_predicted.celltype.l1-B.csv'
## Parse subcluster information
cluster_info <- strsplit(cluster_info, '-')
cluster_info
cluster_info <- 'predicted.celltype.l1-B'
## Parse subcluster information
cluster_info <- strsplit(cluster_info, '-')[[1]]
cluster_info
subset_clusters <- cluster_info[2:length(cluster_info)]
subset_clusters
?DietSeurat
cseq <- DietSeurat(cseq, features = c('orig.ident'), dimreducs = 'pca')
cseq <- DietSeurat(cseq, features = c('orig.ident'), dimreducs = 'pca', assays = c('RNA', 'prot'))
DefaultAssay(cseq)
cseq <- DietSeurat(cseq, features = c('orig.ident'), dimreducs = 'pca')
cseq <- DietSeurat(cseq, assays = c('RNA'), features = c('orig.ident'), dimreducs = 'pca')
cseq <- DietSeurat(cseq, assays = c('RNA', 'prot'), features = c('orig.ident'), dimreducs = 'pca')
cseq <- DietSeurat(cseq, assays = DefaultAssay(cseq), features = c('orig.ident'), dimreducs = 'pca')
cseq <- DietSeurat(cseq, assays = DefaultAssay(cseq),  dimreducs = 'pca')
cseq <- DietSeurat(cseq, assays = DefaultAssay(cseq),  dimreducs = c('pca'), features = c("nCount_RNA"))
colnames(cseq)
cseq@meta.data[, colnames(cseq@meta.data)]
cseq@meta.data[, colnames(cseq@meta.data)] <- NULL
cseq@meta.data
paste0(subset_name, '_', c('prot', 'RNA'))
subset_name <- 'B'
paste0(subset_name, '_', c('prot', 'RNA'))
### Optionally reduce output to only those created in the function
cseq <- DietSeurat(cseq, counts = F, data = F, assays = DefaultAssay(cseq), dimreducs = paste0(subset_name, '_', c('prot', 'RNA')))
cseq@assays$RNA@counts[1, ]
row.names(cseq@assays$RNA@counts)
row.names(cseq@assays$RNA@counts)[1]
cseq <- DietSeurat(cseq, counts = T, data = F, assays = 'RNA', features = ow.names(cseq@assays$RNA@counts)[1] , dimreducs = paste0(subset_name, '_', c('prot', 'RNA')))
cseq <- DietSeurat(cseq, counts = T, data = F, assays = 'RNA', features = row.names(cseq@assays$RNA@counts)[1] , dimreducs = paste0(subset_name, '_', c('prot', 'RNA')))
cseq <- DietSeurat(cseq, counts = F, data = T, assays = 'RNA', features = row.names(cseq@assays$RNA@data)[1] , dimreducs = paste0(subset_name, '_', c('prot', 'RNA')))
umap_cluster_subset <- function(cseq, subset_type, subset_clusters, exclude_gene_names = NA, resolution = 0.1, output_full = T){
subset_name <- paste0('Sub_', gsub(', ', '_', toString(subset_clusters)))
cells <- colnames(cseq)[which(cseq[[subset_type]][,1] %in% subset_clusters)]
csub <- subset(cseq, cells = cells)
### Remove previous dimensionality reductions
csub <- DietSeurat(csub)
### Find variable features, Scale, PCA, Find neighbors, Cluster, UMAP
csub <- cluster_RNA(csub, exclude_gene_names, resolution)
### UMAP, Find neighbors, cluster
csub <- cluster_prot(csub, resolution)
prot_clust <- csub$prot_clusters
RNA_clust <- csub$RNA_clusters
original_columns <- colnames(cseq@meta.data)
### Add cluster info to the original object
prot_clust[colnames(cseq)[which(!colnames(cseq) %in% names(prot_clust))]] <- NA
cseq@meta.data[, paste0(subset_name, '_prot_clusters')] <- prot_clust
RNA_clust[colnames(cseq)[which(!colnames(cseq) %in% names(RNA_clust))]] <- NA
cseq@meta.data[, paste0(subset_name, '_RNA_clusters')] <- RNA_clust
### Add UMAP info to the original object
cseq@reductions[paste0(subset_name, '_prot')] <- csub@reductions$RNA_umap
cseq@reductions[paste0(subset_name, '_RNA')] <- csub@reductions$prot_umap
if(output_full = F){
### Optionally reduce output to only those created in the function
DefaultAssay(cseq) <-'RNA'
cseq <- DietSeurat(cseq, counts = F, data = T, assays = 'RNA', features = row.names(cseq@assays$RNA@data)[1] , dimreducs = paste0(subset_name, '_', c('prot', 'RNA')))
cseq@meta.data[, original_columns] <- NULL
}
return(cseq)
}
umap_cluster_subset <- function(cseq, subset_type, subset_clusters, exclude_gene_names = NA, resolution = 0.1, output_full = T){
subset_name <- paste0('Sub_', gsub(', ', '_', toString(subset_clusters)))
cells <- colnames(cseq)[which(cseq[[subset_type]][,1] %in% subset_clusters)]
csub <- subset(cseq, cells = cells)
### Remove previous dimensionality reductions
csub <- DietSeurat(csub)
### Find variable features, Scale, PCA, Find neighbors, Cluster, UMAP
csub <- cluster_RNA(csub, exclude_gene_names, resolution)
### UMAP, Find neighbors, cluster
csub <- cluster_prot(csub, resolution)
prot_clust <- csub$prot_clusters
RNA_clust <- csub$RNA_clusters
original_columns <- colnames(cseq@meta.data)
### Add cluster info to the original object
prot_clust[colnames(cseq)[which(!colnames(cseq) %in% names(prot_clust))]] <- NA
cseq@meta.data[, paste0(subset_name, '_prot_clusters')] <- prot_clust
RNA_clust[colnames(cseq)[which(!colnames(cseq) %in% names(RNA_clust))]] <- NA
cseq@meta.data[, paste0(subset_name, '_RNA_clusters')] <- RNA_clust
### Add UMAP info to the original object
cseq@reductions[paste0(subset_name, '_prot')] <- csub@reductions$RNA_umap
cseq@reductions[paste0(subset_name, '_RNA')] <- csub@reductions$prot_umap
if(output_full = F){
### Optionally reduce output to only those created in the function
DefaultAssay(cseq) <-'RNA'
cseq <- DietSeurat(cseq, counts = F, data = T, assays = 'RNA', features = row.names(cseq@assays$RNA@data)[1] , dimreducs = paste0(subset_name, '_', c('prot', 'RNA')))
cseq@meta.data[, original_columns] <- NULL
}
return(cseq)
}
subset_name <- paste0('Sub_', gsub(', ', '_', toString(subset_clusters)))
cells <- colnames(cseq)[which(cseq[[subset_type]][,1] %in% subset_clusters)]
umap_cluster_subset <- function(cseq, subset_type, subset_clusters, exclude_gene_names = NA, resolution = 0.1, output_full = T){
subset_name <- paste0('Sub_', gsub(', ', '_', toString(subset_clusters)))
cells <- colnames(cseq)[which(cseq[[subset_type]][,1] %in% subset_clusters)]
csub <- subset(cseq, cells = cells)
### Remove previous dimensionality reductions
csub <- DietSeurat(csub)
### Find variable features, Scale, PCA, Find neighbors, Cluster, UMAP
csub <- cluster_RNA(csub, exclude_gene_names, resolution)
### UMAP, Find neighbors, cluster
csub <- cluster_prot(csub, resolution)
prot_clust <- csub$prot_clusters
RNA_clust <- csub$RNA_clusters
original_columns <- colnames(cseq@meta.data)
### Add cluster info to the original object
prot_clust[colnames(cseq)[which(!colnames(cseq) %in% names(prot_clust))]] <- NA
cseq@meta.data[, paste0(subset_name, '_prot_clusters')] <- prot_clust
RNA_clust[colnames(cseq)[which(!colnames(cseq) %in% names(RNA_clust))]] <- NA
cseq@meta.data[, paste0(subset_name, '_RNA_clusters')] <- RNA_clust
### Add UMAP info to the original object
cseq@reductions[paste0(subset_name, '_prot')] <- csub@reductions$RNA_umap
cseq@reductions[paste0(subset_name, '_RNA')] <- csub@reductions$prot_umap
if(output_full == F){
### Optionally reduce output to only those created in the function
DefaultAssay(cseq) <-'RNA'
cseq <- DietSeurat(cseq, counts = F, data = T, assays = 'RNA', features = row.names(cseq@assays$RNA@data)[1] , dimreducs = paste0(subset_name, '_', c('prot', 'RNA')))
cseq@meta.data[, original_columns] <- NULL
}
return(cseq)
}
cseq_file <- '/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/Go2/Mapped.RDS'
exclude_file <- '/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/Go2/Excluded_genes.txt'
acluster_info <- 'predicted.celltype.l1-B'
out_csv <- '/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/Go2/SubClusters/RNA_predicted.celltype.l1-B.RDS'
out_rds <- '/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/Go2/SubClusters/RNA_predicted.celltype.l1-B.RDS'
### Genes to exclude
if(file.info(exclude_file)[, 'size'] > 0){
exclude_gene_names <- read.table(exclude_file)[,1]
} else{
exclude_gene_names <- c()
}
### Read Seurat object
cseq <- readRDS(cseq_file)
## Parse subcluster information
cluster_info <- strsplit(cluster_info, '-')[[1]]
subset_type<- cluster_info[1]
subset_clusters <- cluster_info[2:length(cluster_info)]
### Will ouput a Seurat object but with basically only the outputs of the function included within
cseq <- umap_cluster_subset(cseq, subset_type, subset_clusters, exclude_gene_names, 0.1, output_full = FALSE)
subset_type
subset_clusters
cluster_info
## Parse subcluster information
cluster_info <- strsplit(cluster_info, '-')[[1]]
subset_type<- cluster_info[1]
cluster_info
subset_type
subset_clusters <- cluster_info[2:length(cluster_info)]
subset_clusters
cluster_info
subset_clusters
length(cluster_info)
cluster_info
cluster_info <- 'predicted.celltype.l1-B'
## Parse subcluster information
cluster_info <- strsplit(cluster_info, '-')[[1]]
subset_type<- cluster_info[1]
subset_clusters <- cluster_info[2:length(cluster_info)]
subset_clusters
subset_type
### Will ouput a Seurat object but with basically only the outputs of the function included within
cseq <- umap_cluster_subset(cseq, subset_type, subset_clusters, exclude_gene_names, 0.1, output_full = FALSE)
source('/hpcdata/vrc/vrc1_data/snakemakes/sc_functions.R')
source('/hpcdata/vrc/vrc1_data/snakemakes/douek_lab/sc_functions.R')
source('/hpcdata/vrc/vrc1_data/douek_lab/snakemakes/sc_functions.R')
### Will ouput a Seurat object but with basically only the outputs of the function included within
cseq <- umap_cluster_subset(cseq, subset_type, subset_clusters, exclude_gene_names, 0.1, output_full = FALSE)
cseq@meta.data
colnames(cseq@meta.data)
out_rdata <-  '/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/Go2/App/Data.RData'
project <- '2021614_21-002'
username <- 'wakecg'
server <- 'rstudio-connect.niaid.nih.gov'
cseq_file <-  '/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/Go2/Mapped.RDS'
rds_files <- c('RNA-RNA_clusters', 'RNA-prot_clusters', 'RNA-wnn_clusters', 'prot-RNA_clusters', 'prot-prot_clusters', 'prot-wnn_clusters')
rds_files <- c('RNA-RNA_clusters', 'RNA-prot_clusters', 'prot-RNA_clusters', 'prot-prot_clusters', 'prot-wnn_clusters')
rds_files <- paste0('/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/Go1/Cluster_DE/', rds_files, '.RDS')
saveRDS(cseq, file = out_rds)
saveRDS(cseq, file = out_rds)
out_rds <- '/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/Go2/SubClusters/predicted.celltype.l1-B.RDS'
saveRDS(cseq, file = out_rds)
out_rdata <-  '/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/Go2/App/Data.RData'
project <- '2021614_21-002'
username <- 'wakecg'
server <- 'rstudio-connect.niaid.nih.gov'
cseq_file <-  '/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/Go2/Mapped.RDS'
rds_files <- c('RNA-RNA_clusters', 'RNA-prot_clusters', 'RNA-wnn_clusters', 'prot-RNA_clusters', 'prot-prot_clusters', 'prot-wnn_clusters')
rds_files <- c('RNA-RNA_clusters', 'RNA-prot_clusters', 'prot-RNA_clusters', 'prot-prot_clusters', 'prot-wnn_clusters')
rds_files <- c(paste0('/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/Go1/Cluster_DE/', rds_files, '.RDS'),
'/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/Go1/SubClusters/predicted.celltype.l1-B.RDS')
cluster_de_files <- rds_files[grepl('/Cluster_DE/', rds_files)]
sub_cluster_files <- rds_files[grepl('/SubCluster/', rds_files)]
cluster_de_files
sub_cluster_files
sub_cluster_files <- rds_files[grepl('/SubClusters/', rds_files)]
sub_cluster_files
sub_cluster_files
dat <- lapply(sub_cluster_files, function(file) readRDS(file))
sub_cluster_files
rds_files <- c(paste0('/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/Go2/Cluster_DE/', rds_files, '.RDS'),
'/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/Go1/SubClusters/predicted.celltype.l1-B.RDS')
### Divide support RDS files into Cluster DE or sub clusters
cluster_de_files <- rds_files[grepl('/Cluster_DE/', rds_files)]
sub_cluster_files <- rds_files[grepl('/SubClusters/', rds_files)]
dat <- lapply(sub_cluster_files, function(file) readRDS(file))
sub_cluster_files
rds_files <- c(paste0('/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/Go2/Cluster_DE/', rds_files, '.RDS'),
'/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/Go2/SubClusters/predicted.celltype.l1-B.RDS')
### Divide support RDS files into Cluster DE or sub clusters
cluster_de_files <- rds_files[grepl('/Cluster_DE/', rds_files)]
sub_cluster_files <- rds_files[grepl('/SubClusters/', rds_files)]
dat <- lapply(sub_cluster_files, function(file) readRDS(file))
dat <- lapply(sub_cluster_files, function(file) readRDS(file))
sub_cluster_files
### Divide support RDS files into Cluster DE or sub clusters
cluster_de_files <- rds_files[grepl('/Cluster_DE/', rds_files)]
cluster_de_files
out_rdata <-  '/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/Go2/App/Data.RData'
project <- '2021614_21-002'
username <- 'wakecg'
server <- 'rstudio-connect.niaid.nih.gov'
cseq_file <-  '/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/Go2/Mapped.RDS'
rds_files <- c('RNA-RNA_clusters', 'RNA-prot_clusters', 'RNA-wnn_clusters', 'prot-RNA_clusters', 'prot-prot_clusters', 'prot-wnn_clusters')
rds_files <- c('RNA-RNA_clusters', 'RNA-prot_clusters', 'prot-RNA_clusters', 'prot-prot_clusters', 'prot-wnn_clusters')
rds_files <- c(paste0('/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/Go2/Cluster_DE/', rds_files, '.RDS'),
'/hpcdata/vrc/vrc1_data/douek_lab/projects/RNASeq/2021614_21-002/results/Go2/SubClusters/predicted.celltype.l1-B.RDS')
### Divide support RDS files into Cluster DE or sub clusters
cluster_de_files <- rds_files[grepl('/Cluster_DE/', rds_files)]
cluster_de_files
sub_cluster_files <- rds_files[grepl('/SubClusters/', rds_files)]
sub_cluster_files
-
''
dat <- lapply(sub_cluster_files, function(file) readRDS(file))
names(dat) <- sapply(cluster_de_files, function(file) gsub('.RDS', '', basename(file)))
sapply(cluster_de_files, function(file) gsub('.RDS', '', basename(file)))
names(dat) <- sapply(sub_cluster_files, function(file) gsub('.RDS', '', basename(file)))
dat
### Read Seurat data
cseq <- readRDS(cseq_file)
dat[[sc]]@meta.data
sc <- names(dat)
dat[[sc]]@meta.data
### Add cluster info to the original object
cseq@meta.data[, colnames(dat[[sc]]@meta.data)] <- dat[[sc]]@meta.data
cseq$Sub_B_prot_clusters
dat[[sc]]@reductions
umap <- names(dat[[sc]]@reductions)
umap
umap <- names(dat[[sc]]@reductions)[1]
csub@reductions[umap]
dat[[sc]]@reductions[umap]
cseq@reductions[umap] <- dat[[sc]]@reductions[umap]
### Add each dimensionality reduction and meta data column to the real cseq
for(sc in names(dat)){
### Add cluster info to the original object
cseq@meta.data[, colnames(dat[[sc]]@meta.data)] <- dat[[sc]]@meta.data
### Add UMAP info to the original object
for(umap in names(dat[[sc]]@reductions)){
cseq@reductions[umap] <- dat[[sc]]@reductions[umap]
}
}
shiny::runApp('/hpcdata/vrc/vrc1_data/douek_lab/snakemakes/CITESeq/scripts')
