import pandas as pd
import subprocess
import os
from collections import defaultdict

configfile: 'project_config_file.yaml'
localrules: aggregate_fastqc_raw, aggregate_trim_stderr, aggregate_RSeQC

config = defaultdict(str, config)

#### Assume demultiplexing was done with bcl2fastq2 with specified adapters in sample sheet.
demult = True
if config['demultiplex'] == 'SSSS': demult = False ### Unless 'SSSS' is input, meaning Sam's sans-sample-sheet demultiplexing code
if config['adapter'] == 'Illumina':
  adapter_file = '/hpcdata/vrc/vrc1_data/douek_lab/programs/Trimmomatic-0.39/adapters/TruSeq3-PE.fa'
elif config['adapter'] == 'Nextera':
  adapter_file = '/hpcdata/vrc/vrc1_data/douek_lab/programs/Trimmomatic-0.39/adapters/NexteraPE-PE.fa'

cell_sheet = os.path.join(os.getcwd(), config['Cell_sheet'])
cells = pd.read_table(cell_sheet, sep = ',').set_index("Cell_ID", drop = False)
cells['Lane'] = cells['Lane'].apply(str)
### Specific to Kristins T, bcl2fastq won't produce results for one sample
cells = cells[(cells['FC_Name'] != '210401_K00241_0189_BHKMVMBBXY') & (cells['Lane'] != '8')]

#def cells_from_fc(wildcards): ### subdir is Z1/samplename_Z1_etc.fastq.gz
#  sub = cells[cells['FC_Name'] == wildcards.FC]
#  return list(sub.R1_subdir) + list(sub.R2_subdir)



#### Combine replicates once
rule:
  input:
    dict[cell_id?] (multiple files in runs dir)
  output:
    single file in data dir

if demult: ### Requires Cell_ID, Cell_Name, S_N, Lane and FC_Name
  ### Runs fastq names - fastq file names  output from bcl2fastq2
  cells['R1'] = cells['Cell_Name'].map(str) + '_' + cells['S_N'].map(str) + '_L00' + cells['Lane'].map(str) + '_R1_001' 
  cells['R2'] = cells['Cell_Name'].map(str) + '_' + cells['S_N'].map(str) + '_L00' + cells['Lane'].map(str) + '_R2_001' 
  ### Runs fastq full paths - fastq file paths  output from bcl2fastq (and then Sam's demultiplexing?)
  cells['R1_fullpath'] = list([os.path.join(config['runs_dir'], cells.FC_Name[i], 'bcl2fastq2', config['project'], cells['Cell_ID'][i], cells['R1'][i] + '.fastq.gz') for i in range(0, len(cells['R1']))])
  cells['R2_fullpath'] = list([os.path.join(config['runs_dir'], cells.FC_Name[i], 'bcl2fastq2', config['project'], cells['Cell_ID'][i], cells['R2'][i] + '.fastq.gz') for i in range(0,len(cells['R1']))])
  ### Raw fastq names
  ### Raw fastq full paths
else:  ### Requires UDP_ID and Lane and FC_Name
  ### fastq file names  output from Sam's sans-sample-sheet code
  cells['R1'] = 'read1_index_' + cells['UDP_ID'].map(str) 
  cells['R2'] = 'read2_index_' + cells['UDP_ID'].map(str)
  ### fastq file paths  output from bcl2fastq (and then Sam's demultiplexing?)
  cells['R1_fullpath'] = list([os.path.join(config['runs_dir'], cells.FC_Name[i], 'demultiplexed', cells['Lane'][i], cells['UDP_ID'][i], cells['R1'][i] + '.fq.gz') for i in range(0, len(cells['R1']))])
  cells['R2_fullpath'] = list([os.path.join(config['runs_dir'], cells.FC_Name[i], 'demultiplexed', cells['Lane'][i], cells['UDP_ID'][i], cells['R2'][i] + '.fq.gz') for i in range(0,len(cells['R1']))])

### List of full paths to R1 and R2
runs_fastqs = list(cells['R1_fullpath']) + list(cells['R2_fullpath'])

#cells['Cell_ID_R1'] = cells['Cell_ID'].map(str) + '_R1'
#cells['Cell_ID_R2'] = cells['Cell_ID'].map(str) + '_R2'
#fastq_names = list(cells['Cell_ID_R1']) + list(cells['Cell_ID_R2'])
raw_fastq_names = list(cells['R1']) + list(cells['R2'])

### Trimmomatic error logs per cell
cells['trimerr'] = list([os.path.join('data', 'fastq', 'trimmed', cells['Cell_ID'][i], 'trim_stderr.txt') for i in range(0,len(cells['R1']))])
trimerr_files = cells['trimerr']
### fastq file paths output from trimmomatic and moved to project directory. IS THIS CURRENTLY USED?
cells['R1_projpath'] = list([os.path.join('data', 'fastq', 'trimmed', cells['Cell_ID'][i], cells['Cell_ID'][i] + '_R1.fq.gz') for i in range(0,len(cells['R1']))])
cells['R2_projpath'] = list([os.path.join('data', 'fastq', 'trimmed', cells['Cell_ID'][i], cells['Cell_ID'][i] + '_R2.fq.gz') for i in range(0,len(cells['R2']))])
### List of both R1 and R2
proj_fastqs = list(cells['R1_projpath']) + list(cells['R2_projpath'])
trimmed_qc = [x.replace('.fq.gz', '_paired_fastqc.zip') for x in proj_fastqs]
### STAR bam file paths 
cells['bam'] = list([os.path.join('data', 'bam', cells.Cell_ID[i], cells.Cell_ID[i] + '_Aligned.sortedByCoord.out.bam') for i in range(0, len(cells['R1']))])
cells['flagstat'] = list([os.path.join('data', 'bam', cells.Cell_ID[i], 'Nreads.csv') for i in range(0, len(cells['R1']))])
### STAR count output paths
cells['tab'] = list([os.path.join('data', 'count', cells.Cell_ID[i], 'gene_abundances.tab') for i in range(0, len(cells['R1']))])
bam_files = cells['bam']
tab_files = cells['tab']

### Dictionary of flowcells, FullName:AbbreviatedName
flowcells = dict(zip(cells.FC_Name, cells.FC_ID))
### Dictionary whose values are lane regular expressions for each flowcell
#lane_regex = dict(zip(flowcells.keys(), ['s_[' + ''.join(map(str, list(set(cells[cells['FC_ID'] == fc].Lane)))) + ']'  for fc in list(flowcells.values())]))
### Dict whose values are lists of raw fastq files
#fc_fqs = dict(zip(flowcells.keys(), [list(cells[cells['FC_ID'] == fc].R1_fullpath) + list(cells[cells['FC_ID'] == fc].R2_fullpath) for fc in list(flowcells.values())]))
#proj_fqs = dict(zip(flowcells.keys(), [list(cells[cells['FC_ID'] == fc].R1) + list(cells[cells['FC_ID'] == fc].R2) for fc in list(flowcells.values())]))

### To define the fastqc zip files that will be requested
cells['R1_raw_qc'] = list([os.path.join('data', 'fastq', 'raw', cells['Cell_ID'][i], cells['R1'][i] + '_fastqc.zip') for i in range(0,len(cells['R1']))])
cells['R2_raw_qc'] = list([os.path.join('data', 'fastq', 'raw', cells['Cell_ID'][i], cells['R2'][i] + '_fastqc.zip') for i in range(0,len(cells['R2']))])
raw_qc = list(cells['R1_raw_qc']) + list(cells['R2_raw_qc'])
### From those request, get the raw fastq file for fastqc input
get_raw_fastq = dict(zip(raw_fastq_names, runs_fastqs))
def get_raw_fastq_Rx(wildcards):
  return get_raw_fastq[wildcards.sample]

#trimmed_qc = [x.replace('/raw/', '/trimmed/') for x in raw_qc]
#get_trimmed_fastq = dict(zip(_fastq_names, runs_fastqs))
#def get_trimmed_fastq_Rx(wildcards):
#  return get_trimmed_fastq[wildcards.sample]

#get_fastq = dict(zip(fastq_names, runs_fastqs))
#def get_fastq_Rx(wildcards):
#  return get_fastq[wildcards.sample]

get_R1 = dict(zip(cells['Cell_ID'], cells['R1_fullpath']))
get_R2 = dict(zip(cells['Cell_ID'], cells['R2_fullpath']))
def get_fastq_R1_R2(wildcards):
  out = {'R1':get_R1[wildcards.cell_id], 'R2':get_R2[wildcards.cell_id]}
  return out

rule all:
  input:
    "data/Seurat_object.rds"

### Pipeline starts after bcl2fastq has been completed separately
rule fastqc_raw_once:
  input:
    get_raw_fastq_Rx
  output:
    'data/fastq/raw/{cell_id}/{cell_id}_fastqc.zip'
  shell:
    "fastqc --extract -o data/fastq/raw/{wildcards.cell_id}/ {input}"

rule fastqc_trimmed_once:
  input:
    'data/fastq/trimmed/{cell_id}/{sample}_paired.fq.gz'
  output:
    'data/fastq/trimmed/{cell_id}/{sample}_paired_fastqc.zip'
  shell:
    "fastqc --extract -o data/fastq/trimmed/{wildcards.cell_id}/ {input}"

### wildcard sdir cannot go in the expand function with the non-wildcard fastq
rule aggregate_fastqc_raw:
  input:
    raw_qc
  output:
    "data/fastq/raw/multiqc_input_files.txt"
  shell:
    "ls {input} > {output}"

rule aggregate_fastqc_trimmed:
  input:
    trimmed_qc
  output:
    "data/fastq/trimmed/multiqc_input_files.txt"
  shell:
    "ls {input} > {output}"

rule aggregate_bams:
  input:
    expand('data/bam/{cell_id}/{cell_id}_Aligned.sortedByCoord.out.bam.bai', cell_id = cells['Cell_ID'])
  output:
    'data/bam/bam_files.txt'
  shell:
    'ls {input} > {output}'

rule aggregate_rseqc:
  input:
    expand('data/bam/{cell_id}/RSeQC/multiqc_input_files.txt', cell_id = cells['Cell_ID'])
  output:
    'data/bam/multiqc_input_files.txt'
  shell:
    "cat {input} > {output}"

rule aggregate_trim_stderr:
  input: 
    trimerr_files
  output:
    "data/trims.txt"
  shell:
    "ls {input} > {output}"

rule aggregate_multiqc:
  input:
    raw_fastq = 'data/fastq/raw/multiqc.html',
    trimmed_fastq = 'data/fastq/trimmed/multiqc.html',
    bam = 'data/bam/multiqc.html'
  output:
    'data/multiqcs.txt'
  shell:
    'ls {input} > {output}'

rule multiqc:
  input:
    "data/{sdir}/multiqc_input_files.txt"
  resources:mem_mb=240000
  output:
    "data/{sdir}/multiqc.html"
  shell:
    "multiqc --file-list {input} -f --filename {output}"

rule trimmomatic_once:
  input:
    unpack(get_fastq_R1_R2)
  params:
    adapter_file = adapter_file
  output:
    R1_paired = "data/fastq/trimmed/{cell_id}/{cell_id}_R1_paired.fq.gz",
    R1_unpaired = "data/fastq/trimmed/{cell_id}/{cell_id}_R1_unpaired.fq.gz",
    R2_paired = "data/fastq/trimmed/{cell_id}/{cell_id}_R2_paired.fq.gz",
    R2_unpaired = "data/fastq/trimmed/{cell_id}/{cell_id}_R2_unpaired.fq.gz",
  conda:
    "/hpcdata/vrc/vrc1_data/douek_lab/snakemakes/RRBSeq/py2.7.yml"
  log:
    log1 = "data/fastq/trimmed/{cell_id}/trim_stdout.txt",
    log2 = "data/fastq/trimmed/{cell_id}/trim_stderr.txt",
  shell:
    """
    java -Xmx7G -jar /hpcdata/vrc/vrc1_data/douek_lab/programs/Trimmomatic-0.39/trimmomatic-0.39.jar PE -phred33 -threads 1 {input.R1} {input.R2} {output.R1_paired} {output.R1_unpaired} {output.R2_paired} {output.R2_unpaired} ILLUMINACLIP:{params.adapter_file}:2:30:10:4:true LEADING:3 TRAILING:3 SLIDINGWINDOW:4:20 MINLEN:50 1>{log.log1} 2>{log.log2}
    """

rule STAR_align_once:
  input: 
    "data/fastq/trimmed/{cell_id}/{cell_id}_R1_paired.fq.gz",
    "data/fastq/trimmed/{cell_id}/{cell_id}_R2_paired.fq.gz"
  params:
    starDB = config['starDB']
  output:
    bam = "data/bam/{cell_id}/{cell_id}_Aligned.sortedByCoord.out.bam",
    starlog = 'data/bam/{cell_id}/{cell_id}_Log.final.out'
  resources: mem_mb=30000
  log:
    outlog = "data/bam/{cell_id}/logs/STAR.olog",
    errlog = "data/bam/{cell_id}/logs/STAR.elog"
  shell:
    """
    mkdir -p data/fastq/bam/{wildcards.cell_id}/RSeQC/
    mkdir -p data/fastq/bam/{wildcards.cell_id}/logs/
    STAR --genomeDir {params.starDB} --readFilesIn {input} --outFileNamePrefix data/bam/{wildcards.cell_id}/{wildcards.cell_id}_ --readFilesCommand gzip -dc --outReadsUnmapped Fastx --outSAMtype BAM SortedByCoordinate --outFilterMultimapNmax 20 --outFilterMismatchNoverReadLmax 0.04 --limitSjdbInsertNsj 1200000 1>{log.outlog} 2>{log.errlog}
   """

rule flagstat_once:
  input:
    "data/bam/{cell_id}/{cell_id}_Aligned.sortedByCoord.out.bam"
  output:
    "data/bam/{cell_id}/Nreads.csv"
  shell:
    """
    echo -n {wildcards.cell_id}, >> {output}
    samtools flagstat {input} | grep 'in total' | awk 'BEGIN{{FS=" "}} {{print $1}}' | xargs echo >> {output}
    """
    
rule aggr_flagstat:
  input:
    cells['flagstat']
  output:
    "data/bam/Nreads.csv"
  shell:
    "cat {input} > {output}"

### Input and output are csv of Cell_ID, N_read. Output has fewer rows.
checkpoint filter_empty:
  input:
    "data/bam/Nreads.csv"
  params:
    scripts_dir = config['scripts_dir']
  output:
    "data/Post_filter.csv"
  shell:
    "Rscript {params.scripts_dir}/Cell_filter.R {input} {output}"

rule index_bam_once:
  input:
    "data/bam/{cell_id}/{cell_id}_Aligned.sortedByCoord.out.bam",
  log:
    outlog = "data/bam/{cell_id}/logs/index.olog",
    errlog = "data/bam/{cell_id}/logs/index.elog"
  output:
    "data/bam/{cell_id}/{cell_id}_Aligned.sortedByCoord.out.bam.bai",
  shell:
    "samtools index {input} 1>{log.outlog} 2>{log.errlog}"

rule idxstats_once:
  input:
    "data/bam/{cell_id}}/{cell_id}_Aligned.sortedByCoord.out.bam",
  output:
    "data/bam/{cell_id}/Star_alignment_stats.txt"
  shell:
    "samtools idxstats {input} > {output}"

###  These two RSeQC functions take so long that they will run separately
rule RSeQC_tin:
  input:
    bam = "data/bam/{cell_id}/{cell_id}_Aligned.sortedByCoord.out.bam",
    bai = "data/bam/{cell_id}/{cell_id}_Aligned.sortedByCoord.out.bam.bai"
  params:
    anno = config['refbed'],
  output: 
    tin = 'data/bam/{cell_id}/RSeQC/{cell_id}.out.summary.txt',
    xls = 'data/bam/{cell_id}/RSeQC/{cell_id}.out.tin.xls'
  shell:
    """
    mkdir -p data/bam/{wildcards.cell_id}/RSeQC/
    tin.py -i {input.bam} -r {params.anno} > {output.tin}
    """

rule RSeQC_gbc:
  input: 
    bam = "data/bam/{cell_id}/{cell_id}_Aligned.sortedByCoord.out.bam",
    bai = "data/bam/{cell_id}/{cell_id}_Aligned.sortedByCoord.out.bam.bai"
  params:
    anno = config['refbed']
  output:
    geneBody_cov = 'data/bam/{cell_id}/RSeQC/{cell_id}.geneBodyCoverage.txt'
  shell:
    """
    mkdir -p data/bam/{wildcards.cell_id}/RSeQC/
    geneBody_coverage.py -i {input.bam} -o data/bam/{wildcards.cell_id}/RSeQC/{wildcards.cell_id} -r {params.anno}
    """

rule RSeQC_once:
  input:
    bam = "data/bam/{cell_id}/{cell_id}_Aligned.sortedByCoord.out.bam",
    bai = "data/bam/{cell_id}/{cell_id}_Aligned.sortedByCoord.out.bam.bai"
  params:
    anno = config['refbed'],
    out_pref = 'data/bam/{cell_id}/RSeQC/{cell_id}'
  output:
    bam_stat = 'data/bam/{cell_id}/RSeQC/{cell_id}.bam_stat.txt',
    read_dist = 'data/bam/{cell_id}/RSeQC/{cell_id}.read_distribution.txt',
    infer_exp = 'data/bam/{cell_id}/RSeQC/{cell_id}.infer_experiment.txt',
    inner_dist = 'data/bam/{cell_id}/RSeQC/{cell_id}.inner_distance_freq.txt',
    junction_anno = 'data/bam/{cell_id}/RSeQC/{cell_id}_junction_annotation.txt',
    junction_sat = 'data/bam/{cell_id}/RSeQC/{cell_id}.junctionSaturation_plot.r',
    read_GC = 'data/bam/{cell_id}/RSeQC/{cell_id}.GC.xls',
    dup_rate = 'data/bam/{cell_id}/RSeQC/{cell_id}.pos.DupRate.xls',
    RNA_frag_size = 'data/bam/{cell_id}/RSeQC/{cell_id}.RNA_fragment_size.txt'
  shell:
    """
    mkdir -p data/bam/{wildcards.cell_id}/RSeQC/
    bam_stat.py -i {input.bam} > {output.bam_stat}
    read_distribution.py -i {input.bam} -r {params.anno} > {output.read_dist}
    infer_experiment.py -i {input.bam} -r {params.anno} > {output.infer_exp}
    inner_distance.py -i {input.bam} -o {params.out_pref} -r {params.anno}
    junction_annotation.py -i {input.bam} -o {params.out_pref} -r {params.anno} 2>{output.junction_anno}
    junction_saturation.py -i {input.bam} -o {params.out_pref} -r {params.anno}
    read_GC.py -i {input.bam} -o {params.out_pref}
    read_duplication.py -i {input.bam} -o {params.out_pref}
    #read_NVC.py -i {input} -o {params.out_pref}
    #stread_quality.py -i {input} -o {params.out_pref}
    RNA_fragment_size.py -i {input} -r {params.anno} > {output.RNA_frag_size}
    #RPKM_saturation.py -i {input} -o {params.out_pref} -r {params.anno}
    #mismatch_profile.py -i {input} -o {params.out_pref}
    """

rule aggregate_RSeQC:
  input:
    bam_stat = 'data/bam/{cell_id}/RSeQC/{cell_id}.bam_stat.txt',
    read_dist = 'data/bam/{cell_id}/RSeQC/{cell_id}.read_distribution.txt',
    infer_exp = 'data/bam/{cell_id}/RSeQC/{cell_id}.infer_experiment.txt',
    inner_dist = 'data/bam/{cell_id}/RSeQC/{cell_id}.inner_distance_freq.txt',
    junction_anno = 'data/bam/{cell_id}/RSeQC/{cell_id}_junction_annotation.txt',
    junction_sat = 'data/bam/{cell_id}/RSeQC/{cell_id}.junctionSaturation_plot.r',
    read_GC = 'data/bam/{cell_id}/RSeQC/{cell_id}.GC.xls',
    dup_rate = 'data/bam/{cell_id}/RSeQC/{cell_id}.pos.DupRate.xls',
    RNA_frag_size = 'data/bam/{cell_id}/RSeQC/{cell_id}.RNA_fragment_size.txt',
    geneBody_cov = 'data/bam/{cell_id}/RSeQC/{cell_id}.geneBodyCoverage.txt',
    tin = 'data/bam/{cell_id}/RSeQC/{cell_id}.out.summary.txt',
    starlog = 'data/bam/{cell_id}/{cell_id}_Log.final.out'
  output:
    'data/bam/{cell_id}/RSeQC/multiqc_input_files.txt'
  shell:
    'ls {input} > {output}'

rule stringtie_once:
  input:
    bam = 'data/bam/{cell_id}/{cell_id}_Aligned.sortedByCoord.out.bam',
    bai = 'data/bam/{cell_id}/{cell_id}_Aligned.sortedByCoord.out.bam.bai'
  output:
    tab = 'data/count/{cell_id}/gene_abundances.tab'
  log:
    gtflog = 'data/count/{cell_id}/stringtie.gtf',
    txtlog = 'data/count/{cell_id}/stringtie_stderr.txt'
  params:
    ref = config['refgtf']
  #resources:mem_mb=240000
  shell:
    'stringtie {input.bam} -G {params.ref} -A {output.tab} -e 1> {log.gtflog} 2> {log.txtlog}'

### From checkpoint 'filter_empty'
def get_filtered_cells_as_tab_files(wildcards):
  checkpoint_output = checkpoints.filter_empty.get(**wildcards).output[0]
  #checkpoint_output = checkpoints.filter_empty
  ### read it to get list of cell IDs
  cells_filt = pd.read_table(checkpoint_output, sep = ',').set_index("ID", drop = False)
  ### Add 'data/count/{cell_id}/gene_abundances.tab' to each
  cells_filt['tabs'] = 'data/count/' + cells_filt['ID'].map(str) + '/gene_abundances.tab'
  ### return input to create_mtx, list of tab files per cell 
  return list(cells_filt['tabs'])

rule create_mtx:
  input:
    #config['tabs']
    get_filtered_cells_as_tab_files ### checks results from checkpoint
  params:
    project = config['project'],
    Cell_sheet = config['Cell_sheet'],
    scripts_dir = config['SmartSeq_scripts']
  output:
    mtx_file = 'data/raw_mtx.rds'
  shell: ### Currently this determines tab files from those that exist from Cell_sheet. It could instead take input directly here.
    "Rscript {params.scripts_dir}/tab2mtx.R {params.project} {params.Cell_sheet} {output}"

### Filters cells based on general values. Should be updated to take inputs (as CITESeq pipepline)
rule compile_QC_metrics:
  input:
    'data/raw_mtx.rds'
  params:
    runs_dir = config['runs_dir'],
    project = config['project'],
    Cell_sheet = config['Cell_sheet'],
    gtf_file = config['refgtf'],
    scripts_dir = config['SmartSeq_scripts']
  output:
    'data/gtf.RData',
    'data/Cell_filters.txt',
    'data/Cell_filters.pdf',
    'data/Covariates_QC_metrics.csv'
  shell:
    'Rscript {params.scripts_dir}/SC_Compile_QC_metrics.R {input} {params.runs_dir} {params.project} {params.Cell_sheet} {params.gtf_file} {output}'

rule create_seurat_object:
  input:
    'data/raw_mtx.rds',
    'data/Covariates_QC_metrics.csv',
    'data/gtf.RData'
  params:
    project = config['project'],
    scripts_dir = config['SmartSeq_scripts']
  output:
    'data/Seurat_object.rds'
  shell:
    'Rscript {params.scripts_dir}/mtx2seurat.R {params.project} {input} {output}'

